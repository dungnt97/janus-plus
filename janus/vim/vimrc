""
"" Janus setup
""

" Define paths
if has('win32') || has('win64') || has('win32unix')
  let g:janus_path = escape(expand("~/.vim/janus/vim"), ' ')
  let g:janus_vim_path = escape(expand("~/.vim/janus/vim"), ' ')
else
  let g:janus_path = escape(fnamemodify(resolve(expand("<sfile>:p")), ":h"), ' ')
  let g:janus_vim_path = escape(fnamemodify(resolve(expand("<sfile>:p" . "vim")), ":h"), ' ')
endif
let g:janus_custom_path = expand("~/.janus")

" Source janus's core
exe 'source ' . g:janus_vim_path . '/core/before/plugin/janus.vim'

" You should note that groups will be processed by Pathogen in reverse
" order they were added.
call janus#add_group("tools")
call janus#add_group("langs")
call janus#add_group("colors")

""
"" Customisations
""

" Disable plugins prior to loading pathogen
exe 'source ' . g:janus_vim_path . '/core/plugins.vim'

""
"" Pathogen setup
""

" Load all groups, custom dir, and janus core
call janus#load_pathogen()

" Remitano Plugins --- {{{
" Auto installation for vim-plug plugin manager
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')
Plug 'Konfekt/FastFold'
Plug 'sbdchd/neoformat'
Plug 'janko-m/vim-test'
Plug 'benmills/vimux'
Plug 'christoomey/vim-tmux-navigator'
Plug 'vim-ruby/vim-ruby'
Plug 'bogado/file-line'
Plug 'tpope/vim-abolish'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'drmingdrmer/vim-toggle-quickfix'
Plug 'dense-analysis/ale'
"

" Moved from Janus submodules

" Language
Plug 'tpope/vim-rails'
Plug 'chrisbra/csv.vim'
Plug 'mmalecki/vim-node.js'
Plug 'sunaku/vim-ruby-minitest'
Plug 'depuracao/vim-rdoc'
Plug 'sheerun/vim-polyglot'

" Tools
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-unimpaired'
Plug 'scrooloose/nerdcommenter'
Plug 'ervandew/supertab'
Plug 'tpope/vim-fugitive'
Plug 'sjl/gundo.vim'
Plug 'tpope/vim-surround'
Plug 'garbas/vim-snipmate'
Plug 'tomtom/tlib_vim'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'vim-syntastic/syntastic'
Plug 'majutsushi/tagbar'
Plug 'michaeljsmith/vim-indent-object'
Plug 'tpope/vim-endwise'
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'
Plug 'vim-scripts/vimwiki'
Plug 'ap/vim-css-color'
Plug 'chrisbra/NrrwRgn'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'rgarver/Kwbd.vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-cucumber'
Plug 'honza/vim-snippets'
Plug 'tpope/vim-dispatch'
Plug 'terryma/vim-multiple-cursors'
Plug 'thinca/vim-visualstar'
Plug 'bronson/vim-trailing-whitespace'
Plug 'airblade/vim-gitgutter'
Plug 'troydm/zoomwintab.vim'

" Custom
Plug 'itchyny/lightline.vim'
Plug 'alvan/vim-closetag'
Plug 'easymotion/vim-easymotion'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'jiangmiao/auto-pairs'
Plug 'ryanoasis/vim-devicons'
Plug 'vwxyutarooo/nerdtree-devicons-syntax'
Plug 'mattn/emmet-vim'
Plug 'AndrewRadev/tagalong.vim'
Plug 'mattn/vim-ale-icons'
Plug 'luochen1990/rainbow'

" Theme
Plug 'patstockwell/vim-monokai-tasty'

" For golang
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" For rust
Plug 'rust-lang/rust.vim'

" For javascript
Plug 'HerringtonDarkholme/yats.vim'
Plug 'pangloss/vim-javascript'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'styled-components/vim-styled-components'
Plug 'elzr/vim-json'
Plug 'jparise/vim-graphql'

if filereadable(expand("~/.vimrc.before"))
  source ~/.vimrc.before
endif
call plug#end()
"  }}}

highlight ExtraWhitespace ctermbg=yellow guibg=yellow
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

autocmd BufWritePre * :%s/\s\+$//e

" make test commands execute using vimux.vim
let test#strategy = "vimux"
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> t<C-n> :TestNearest<CR> " t Ctrl+n
nmap <silent> t<C-f> :TestFile<CR>    " t Ctrl+f
nmap <silent> t<C-s> :TestSuite<CR>   " t Ctrl+s
nmap <silent> t<C-l> :TestLast<CR>    " t Ctrl+l
nmap <silent> t<C-g> :TestVisit<CR>   " t Ctrl+g

" Delete a line without override the default register
noremap R "_d

" No need to hold shift comma anymore
nnoremap ; :

" Leader
let mapleader = ","

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" Numbers
set relativenumber
set number
set numberwidth=5

" Theme and colors
set lazyredraw
set termguicolors
set background=dark
let g:vim_monokai_tasty_italic = 1
colorscheme vim-monokai-tasty

filetype plugin indent on
" No need for ex mode
nnoremap Q <nop>

" Align blocks of text and keep them selected
vmap < <gv
vmap > >gv
nnoremap <leader>d "_d
vnoremap <leader>d "_d

set timeoutlen=500
set ttimeoutlen=100

let g:syntastic_mode_map={ "mode": "passive" }

" Some NERDTree configution
let NERDTreeShowHidden=1
let NERDTreeIgnore = ['\.DS_Store$', '\.git$']
let NERDTreeAutoDeleteBuffer=1
let NERDTreeQuitOnOpen=1

nmap <silent> <leader>N :NERDTreeFind<CR>
map <silent> - :NERDTreeToggle<CR>
map <C-o> :NERDTreeToggle %<CR>

" Fix nerdtree syntax highlight too slow
augroup nerdtreedisablecursorline
  autocmd!
  autocmd FileType nerdtree setlocal nocursorline
augroup end

" NerdCommenter
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = "left"

" .vimrc.after is loaded after the plugins have loaded
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_rails = 1

" Refresh changed content of a file
set autoread
autocmd BufEnter,FocusGained * checktime

" Clear highlighting on escape in normal mode
" The second line is needed for mapping to the escape key since Vim internally uses escape to represent special keys.
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

" copy current files path to clipboard
nmap cp :let @+= expand("%") <cr>

" re-index tags file
map <Leader>ct :!ctags --extra=+f -R *<CR><CR>

" Yggdroot/LeaderF
let g:Lf_ReverseOrder = 1
nmap <C-p> :LeaderfFile<CR>
nmap <silent> <Leader>p :LeaderfMru<CR>
" search word under cursor, the pattern is treated as regex, and enter normal mode directly
nmap <silent> <Leader>h :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR><CR>

" System Settings  ----------------------------------------------------------{{{
set noswapfile
" {{{

" drmingdrmer/vim-toggle-quickfix
nmap <C-g><C-o> <Plug>window:quickfix:toggle

" Ctrl + S to save
map <C-s> :w<CR>
imap <C-s> <Esc>:w<CR>i

" Ctrl + X to quit
map <C-x> :q<CR>
imap <C-x> <Esc>:q<CR>i

" Ctrl + Q to quit all
map <C-q> :qa<CR>
imap <C-q> <Esc>:qa<CR>i

" Ctrl + A to select all
map <C-a> <esc>ggVG<CR>

" Remove highlight
map <C-h> :nohl<CR>

" Unmap ` char
map ` <Nop>

" Tab all select
vmap <Tab> >gv
vmap <S-Tab> <gv

" Map copy to clipboard
map <C-y> "*y<CR>

" Only run linters that are specified here
let g:ale_linters_explicit = 1
let g:ale_linters = {
    \ 'javascript': ['eslint'],
    \ 'ruby': ['rubocop'],
    \ 'go': ['gopls'],
    \ 'rust': ['analyzer'],
    \ }

" These options bellow to make sure we only run lint when saving file
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0

" Ale auto fix on save
let g:ale_fix_on_save = 1

" Ale icon
let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠️'
highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow

" make listchars
autocmd vimenter * set listchars=tab:→\ ,extends:›,precedes:‹,space:·,trail:·

" Load local directory .vimrc
set exrc
set secure

" fzf
noremap ~ :Files<CR>
noremap ; :Buffers<CR>

" bind \ (backward slash) to grep shortcut
nnoremap K :Ag <C-r><C-W><CR>
nnoremap <C-k> /<C-R><C-W><CR>
nnoremap \ :Ag<SPACE>

" coc.vim config
" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

nmap <Leader>f :Format <CR>

" Easymotion
" s{char}{char} to move to {char}{char} over windows
nmap <Leader>F <Plug>(easymotion-overwin-f)
" Move to line over windows
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Update snipMate version
let g:snipMate = { 'snippet_version' : 1 }

" Update nerdtree windows size
let NERDTreeWinSize = 50

" Lightline
let g:lightline = {
  \ 'colorscheme': 'monokai_tasty',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'cocstatus', 'readonly', 'filename', 'modified' ] ],
  \   'right': [ [ 'lineinfo', 'percent' ],
  \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head',
  \   'cocstatus': 'coc#status'
  \ },
  \ }

let g:lightline = {
  \ 'component_function': {
  \   'filename': 'LightlineFilename',
  \ }
  \ }

function! LightlineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction

" Multi select
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'

" fzf.vim
" Customize fzf colors to match your color scheme
let g:fzf_colors = {
  \ 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'],
  \ }

" Auto close tag
let g:closetag_filenames = '*.html,*.js,*.jsx,*.vue'
let g:closetag_emptyTags_caseSensitive = 1
let g:jsx_ext_required = 0

" nerdtree-git-plugin
" Custom symbols
let g:NERDTreeGitStatusIndicatorMapCustom = {
  \ "Modified"  : "✹",
  \ "Staged"    : "✚",
  \ "Untracked" : "✭",
  \ "Renamed"   : "➜",
  \ "Unmerged"  : "═",
  \ "Deleted"   : ":heavy_multiplication_x:",
  \ "Dirty"     : "✗",
  \ "Clean"     : "✔︎",
  \ "Ignored"   : "☒",
  \ "Unknown"   : "?",
  \ }

" Turn on Golang syntax
let g:go_fold_enable = [
  \ 'block',
  \ 'import',
  \ 'varconst',
  \ 'package_comment'
  \ ]

let go_highlight_operators = [
  \ 'array_whitespace_error',
  \ 'chan_whitespace_error',
  \ 'extra_types',
  \ 'space_tab_error',
  \ 'whitespace_error',
  \ 'operators',
  \ 'functions',
  \ 'function_parameters',
  \ 'function_calls',
  \ 'types',
  \ 'fields',
  \ 'build_constraints',
  \ 'generate_tags',
  \ 'string_spellcheck',
  \ 'format_strings',
  \ 'variable_declarations',
  \ 'variable_assignments',
  \ 'diagnostic_errors',
  \ 'diagnostic_warnings'
  \ ]

for i in go_highlight_operators
  let g:go_highlight_{i} = 1
endfor

" Golang Debug Shortcuts
map <F2> :GoDebugTest<CR>
map <F5> :GoDebugContinue<CR>
map <F6> :GoDebugStep<CR>
map <F9> :GoDebugBreakpoint<CR>
map <F10> :GoDebugNext<CR>
map <F12> :GoDebugStop<CR>

" Custom go-debug windows
let g:go_debug_windows = {
  \ 'vars':       'rightbelow 60vnew',
  \ 'stack':      'rightbelow 10new',
  \ }

" Tagalong setting
let g:tagalong_verbose = 1

" Rainbow setting
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle
let g:rainbow_conf = {
  \	'separately': {
  \		'nerdtree': 0,
  \	}
  \}
